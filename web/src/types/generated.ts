// Generated by Rust AI IDE Shared Types
// Do not edit manually

/**
 *  Application configuration for the Rust AI IDE
 *  This type will be converted to TypeScript for frontend configuration management
 */
export interface AppConfig {
  /**  Core IDE configuration */
  core?: any;
  /**  AI systems configuration */
  ai?: any;
  /**  Performance configuration */
  performance?: any;
}

/**
 *  Core IDE configuration settings
 */
export interface CoreConfig {
  /**  Application name */
  app_name?: string;
  /**  Application version */
  app_version?: string;
  /**  Editor theme */
  theme?: string;
  /**  Font preferences */
  fonts?: any;
  /**  Editor settings */
  editor?: any;
}

/**
 *  Font configuration for the IDE
 */
export interface FontConfig {
  /**  Editor font family */
  editor_font_family?: string;
  /**  Editor font size */
  editor_font_size?: number;
  /**  UI font family */
  ui_font_family?: string;
  /**  UI font size */
  ui_font_size?: number;
}

/**
 *  Editor configuration settings
 */
export interface EditorConfig {
  /**  Tab size */
  tab_size?: number;
  /**  Insert spaces instead of tabs */
  insert_spaces?: boolean;
  /**  Word wrap enabled */
  word_wrap?: boolean;
  /**  Minimap enabled */
  minimap?: boolean;
  /**  Line numbers enabled */
  line_numbers?: boolean;
  /**  Automatic save delay in seconds */
  auto_save_delay?: any;
  /**  Bracket matching enabled */
  bracket_matching?: boolean;
  /**  Highlight current line */
  highlight_current_line?: boolean;
}

/**
 *  AI systems configuration
 */
export interface AIConfig {
  /**  Default AI provider */
  default_provider?: any;
  /**  API endpoints */
  endpoints?: any;
}

/**
 *  AI provider types
 */
export type AIProvider =
  'Mock' |
  'OpenAI' |
  'Anthropic' |
  'Local';

/**
 *  Performance configuration
 */
export interface PerformanceConfig {
  /**  Maximum analysis threads */
  max_analysis_threads?: any;
  /**  Maximum memory usage in MB */
  max_memory_mb?: number;
  /**  AI concurrency limit */
  ai_concurrency_limit?: any;
  /**  IO thread pool size */
  io_thread_pool_size?: any;
}

/**
 *  User information structure
 */
export interface User {
  /**  Unique user ID */
  id?: number;
  /**  User's full name */
  name?: string;
  /**  User's email address */
  email?: any;
}

/**
 *  Theme configuration
 */
export type Theme =
  'Light' |
  'Dark' |
  'System';

/**
 *  User preferences
 */
export interface UserPreferences {
  /**  UI theme */
  theme?: any;
  /**  Application settings */
  settings?: any;
}

/**
 *  User settings
 */
export interface UserSettings {
  /**  Enable notifications */
  notifications?: boolean;
  /**  Enable auto-save */
  auto_save?: boolean;
}

/**
 *  API response wrapper
 */
export interface ApiResponse {
  /**  Response status */
  status?: any;
  /**  Response data */
  data?: any;
  /**  Response message */
  message?: any;
  /**  Timestamp */
  timestamp?: string;
}

/**
 *  Status enum for API responses
 */
export type Status =
  'Ok' |
  'Error' |
  'Warning' |
  'Info';

/**
 *  Project configuration
 */
export interface Project {
  /**  Project ID */
  id?: string;
  /**  Project name */
  name?: string;
  /**  Project path */
  path?: string;
  /**  Project settings */
  settings?: any;
}

/**
 *  Project settings
 */
export interface ProjectSettings {
  /**  Default file encoding */
  encoding?: string;
  /**  Default line endings */
  line_endings?: string;
  /**  Project language */
  language?: any;
}

/**
 *  Generic error response
 */
export interface ErrorResponse {
  /**  Error code */
  code?: string;
  /**  Error message */
  message?: string;
  /**  Error details */
  details?: any;
}

/**
 *  Parsed type representation
 */
export interface ParsedType {
  /**  Type name */
  name?: string;
  /**  Type kind */
  kind?: any;
  /**  Additional metadata */
  metadata?: any;
  /**  Documentation */
  documentation?: any;
  /**  Visibility */
  visibility?: any;
  /**  Generics */
  generics?: any;
  /**  Struct fields */
  fields?: any;
  /**  Enum variants */
  variants?: any;
  /**  Associated items */
  associated_items?: any;
  /**  Attributes */
  attributes?: any;
  /**  Source location */
  source_location?: any;
  /**  Dependencies */
  dependencies?: any;
}

/**
 *  Type kind classification
 */
export type TypeKind =
  'Struct' |
  'Enum' |
  'Union' |
  'TypeAlias';

/**
 *  Type metadata
 */
export interface TypeMetadata {
  /**  Documentation */
  docs?: any;
  /**  Visibility */
  visibility?: any;
  /**  Attributes */
  attributes?: any;
}

/**
 *  Visibility levels
 */
export type Visibility =
  'Public' |
  'Crate' |
  'Private' |
  'Module';

/**
 *  Source location information
 */
export interface SourceLocation {
  /**  File path (alias for compatibility) */
  file?: string;
  /**  File path */
  file_path?: string;
  /**  Line number */
  line?: number;
  /**  Column number */
  column?: number;
  /**  Module path */
  module_path?: any;
}

/**
 *  Enum variant representation
 */
export interface Variant {
  /**  Variant name */
  name?: string;
  /**  Variant fields */
  fields?: any;
  /**  Documentation */
  documentation?: any;
  /**  Discriminant */
  discriminant?: any;
  /**  Attributes */
  attributes?: any;
}

/**
 *  Variant field
 */
export interface VariantField {
  /**  Field name */
  name?: any;
  /**  Field type */
  ty?: string;
  /**  Field type (alias) */
  field_type?: string;
}

/**
 *  Struct field representation
 */
export interface Field {
  /**  Field name */
  name?: string;
  /**  Field type */
  ty?: string;
  /**  Field type (alias) */
  field_type?: string;
  /**  Visibility */
  visibility?: any;
  /**  Documentation */
  documentation?: any;
  /**  Is mutable */
  is_mutable?: boolean;
  /**  Attributes */
  attributes?: any;
}

/**
 *  Code generation statistics
 */
export interface GenerationStats {
  /**  Types processed */
  types_processed?: any;
  /**  Types generated */
  types_generated?: any;
  /**  Bytes generated */
  bytes_generated?: any;
  /**  Generation time in milliseconds */
  generation_time_ms?: number;
  /**  Number of warnings */
  warnings_count?: number;
  /**  Number of errors */
  errors_count?: number;
}

/**
 *  Code generation status
 */
export type GenerationStatus =
  'Success' |
  'Failed' |
  'InProgress' |
  'Cancelled';

/**
 *  Code generation metadata
 */
export interface GenerationMetadata {
  /**  Time the generation was performed */
  generated_at?: string;
  /**  Version of the generator */
  generator_version?: string;
  /**  Configuration snapshot */
  config_snapshot?: any;
  /**  Generation statistics */
  stats?: any;
  /**  Generation status */
  status?: any;
}

/**
 *  Transformation context for code generation
 */
export interface TransformationContext {
  /**  Source platform */
  source_platform?: string;
  /**  Target platform */
  target_platform?: string;
  /**  Configuration options */
  config?: any;
}

/**
 *  Generated code result
 */
export interface GeneratedCode {
  /**  Generated content */
  content?: string;
  /**  Target platform */
  target_platform?: string;
  /**  Source types used */
  source_types?: any;
  /**  Generation metadata */
  metadata?: any;
  /**  Dependencies */
  dependencies?: any;
}

// Index file for generated types

export type {AppConfig} from './types';
export {AppConfig} from './types';
export type {CoreConfig} from './types';
export {CoreConfig} from './types';
export type {FontConfig} from './types';
export {FontConfig} from './types';
export type {EditorConfig} from './types';
export {EditorConfig} from './types';
export type {AIConfig} from './types';
export {AIConfig} from './types';
export type {AIProvider} from './types';
export {AIProvider} from './types';
export type {PerformanceConfig} from './types';
export {PerformanceConfig} from './types';
export type {User} from './types';
export {User} from './types';
export type {Theme} from './types';
export {Theme} from './types';
export type {UserPreferences} from './types';
export {UserPreferences} from './types';
export type {UserSettings} from './types';
export {UserSettings} from './types';
export type {ApiResponse} from './types';
export {ApiResponse} from './types';
export type {Status} from './types';
export {Status} from './types';
export type {Project} from './types';
export {Project} from './types';
export type {ProjectSettings} from './types';
export {ProjectSettings} from './types';
export type {ErrorResponse} from './types';
export {ErrorResponse} from './types';
export type {ParsedType} from './types';
export {ParsedType} from './types';
export type {TypeKind} from './types';
export {TypeKind} from './types';
export type {TypeMetadata} from './types';
export {TypeMetadata} from './types';
export type {Visibility} from './types';
export {Visibility} from './types';
export type {SourceLocation} from './types';
export {SourceLocation} from './types';
export type {Variant} from './types';
export {Variant} from './types';
export type {VariantField} from './types';
export {VariantField} from './types';
export type {Field} from './types';
export {Field} from './types';
export type {GenerationStats} from './types';
export {GenerationStats} from './types';
export type {GenerationStatus} from './types';
export {GenerationStatus} from './types';
export type {GenerationMetadata} from './types';
export {GenerationMetadata} from './types';
export type {TransformationContext} from './types';
export {TransformationContext} from './types';
export type {GeneratedCode} from './types';
export {GeneratedCode} from './types';

