// Generated by Rust AI IDE Shared Types
// Do not edit manually

/**
 * Application configuration for the Rust AI IDE
 * This type will be converted to TypeScript for frontend configuration management
 */
export interface AppConfig {
  /** Core IDE configuration */
  core: CoreConfig;
  /** AI systems configuration */
  ai: AIConfig;
  /** Performance configuration */
  performance: PerformanceConfig;
}

/**
 * Core IDE configuration settings
 */
export interface CoreConfig {
  /** Application name */
  app_name: string;
  /** Application version */
  app_version: string;
  /** Editor theme */
  theme: string;
  /** Font preferences */
  fonts: FontConfig;
  /** Editor settings */
  editor: EditorConfig;
}

/**
 * Font configuration for the IDE
 */
export interface FontConfig {
  /** Editor font family */
  editor_font_family: string;
  /** Editor font size */
  editor_font_size: number;
  /** UI font family */
  ui_font_family: string;
  /** UI font size */
  ui_font_size: number;
}

/**
 * Editor configuration settings
 */
export interface EditorConfig {
  /** Tab size */
  tab_size: number;
  /** Insert spaces instead of tabs */
  insert_spaces: boolean;
  /** Word wrap enabled */
  word_wrap: boolean;
  /** Minimap enabled */
  minimap: boolean;
  /** Line numbers enabled */
  line_numbers: boolean;
  /** Automatic save delay in seconds */
  auto_save_delay?: number;
  /** Bracket matching enabled */
  bracket_matching: boolean;
  /** Highlight current line */
  highlight_current_line: boolean;
}

/**
 * AI systems configuration
 */
export interface AIConfig {
  /** Default AI provider */
  default_provider: AIProvider;
  /** API endpoints */
  endpoints: Record<string, string>;
}

/**
 * AI provider types
 */
export enum AIProvider {
  /** Mock provider for testing */
  Mock = "Mock",
  /** OpenAI API */
  OpenAI = "OpenAI",
  /** Anthropic API */
  Anthropic = "Anthropic",
  /** Local provider */
  Local = "Local",
}

/**
 * Performance configuration
 */
export interface PerformanceConfig {
  /** Maximum analysis threads */
  max_analysis_threads: number;
  /** Maximum memory usage in MB */
  max_memory_mb: number;
  /** AI concurrency limit */
  ai_concurrency_limit: number;
  /** IO thread pool size */
  io_thread_pool_size: number;
}

/**
 * User information structure
 */
export interface User {
  /** Unique user ID */
  id: number;
  /** User's full name */
  name: string;
  /** User's email address */
  email?: string;
}

/**
 * Theme configuration
 */
export enum Theme {
  /** Light theme */
  Light = "Light",
  /** Dark theme */
  Dark = "Dark",
  /** System preference */
  System = "System",
}

/**
 * User preferences
 */
export interface UserPreferences {
  /** UI theme */
  theme: Theme;
  /** Application settings */
  settings: UserSettings;
}

/**
 * User settings
 */
export interface UserSettings {
  /** Enable notifications */
  notifications: boolean;
  /** Enable auto-save */
  auto_save: boolean;
}

/**
 * API response wrapper
 */
export interface ApiResponse<T> {
  /** Response status */
  status: Status;
  /** Response data */
  data?: T;
  /** Response message */
  message?: string;
  /** Timestamp */
  timestamp: string;
}

/**
 * Status enum for API responses
 */
export enum Status {
  /** Success status */
  Ok = "ok",
  /** Error status */
  Error = "error",
  /** Warning status */
  Warning = "warning",
  /** Info status */
  Info = "info",
}

/**
 * Project configuration
 */
export interface Project {
  /** Project ID */
  id: string;
  /** Project name */
  name: string;
  /** Project path */
  path: string;
  /** Project settings */
  settings: ProjectSettings;
}

/**
 * Project settings
 */
export interface ProjectSettings {
  /** Default file encoding */
  encoding: string;
  /** Default line endings */
  line_endings: string;
  /** Project language */
  language?: string;
}

/**
 * Generic error response
 */
export interface ErrorResponse {
  /** Error code */
  code: string;
  /** Error message */
  message: string;
  /** Error details */
  details?: Record<string, any>;
}