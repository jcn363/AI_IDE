---
apiVersion: v1
kind: Namespace
metadata:
  name: sql-lsp-enterprise
  labels:
    name: sql-lsp-enterprise
    compliance: soc2-gdpr
    security: enterprise

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: enterprise-lsp-config
  namespace: sql-lsp-enterprise
data:
  enterprise-config.toml: |
    [server]
    port = 8080
    https_port = 8443
    metrics_port = 9090
    log_level = "info"

    [performance]
    max_concurrent_tasks = 100
    batch_size = 50
    enable_parallel_processing = true
    enable_horizontal_scaling = true

    [cache]
    max_memory_per_layer_mb = 2048
    cache_hit_rate_target = 0.85
    enable_distributed_cache = true
    redis_endpoints = ["redis-cluster:6379"]

    [security]
    enable_security_hardening = true
    enable_mfa = false
    tls_version = "1.3"
    audit_log_retention_days = 365
    enable_rate_limiting = true

    [monitoring]
    monitoring_enabled = true
    memory_profiling_interval_seconds = 30
    performance_benchmark_interval_days = 90
    alert_notification_channels = ["email", "slack", "pagerduty"]

    [compliance]
    soc2_enabled = true
    gdpr_enabled = true
    audit_trail_enabled = true
    data_encryption_enabled = true

    [scaling]
    min_instances = 1
    max_instances = 10
    scaling_policy = "cpu_and_memory"
    session_stickiness_ttl_minutes = 30

---
apiVersion: v1
kind: Secret
metadata:
  name: enterprise-secrets
  namespace: sql-lsp-enterprise
type: Opaque
data:
  postgres-password: <base64-encoded-password>
  redis-password: <base64-encoded-password>
  jwt-secret-key: <base64-encoded-jwt-key>
  audit-encryption-key: <base64-encoded-audit-key>
  backup-key: <base64-encoded-backup-key>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: enterprise-storage
  namespace: sql-lsp-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sql-lsp-enterprise
  namespace: sql-lsp-enterprise
  labels:
    app: sql-lsp-enterprise
    version: v1.0.0
    compliance: soc2-gdpr
    security: enterprise
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sql-lsp-enterprise
  template:
    metadata:
      labels:
        app: sql-lsp-enterprise
        version: v1.0.0
        compliance: soc2-gdpr
        security: enterprise
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "https"
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      serviceAccountName: sql-lsp-sa
      containers:
      - name: sql-lsp-enterprise
        image: rust-ai-ide/sql-lsp-enterprise:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: lsp
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        env:
        - name: RUST_LSP_CONFIG_FILE
          value: "/app/config/enterprise-config.toml"
        - name: RUST_LSP_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: enterprise-secrets
              key: postgres-password
        - name: RUST_LSP_REDIS_URL
          valueFrom:
            secretKeyRef:
              name: enterprise-secrets
              key: redis-password
        - name: RUST_LSP_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: enterprise-secrets
              key: jwt-secret-key
        - name: RUST_LSP_AUDIT_KEY
          valueFrom:
            secretKeyRef:
              name: enterprise-secrets
              key: audit-encryption-key
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: cache-volume
          mountPath: /app/cache
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        resources:
          limits:
            cpu: "4"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 9090
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 9090
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /startup
            port: 9090
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: config-volume
        configMap:
          name: enterprise-lsp-config
      - name: logs-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}
      - name: ssl-certs
        secret:
          secretName: ssl-certs
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sql-lsp-enterprise
              topologyKey: kubernetes.io/hostname
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - postgres
              topologyKey: kubernetes.io/hostname
      serviceAccountName: sql-lsp-sa
      automountServiceAccountToken: true

---
apiVersion: v1
kind: Service
metadata:
  name: sql-lsp-enterprise
  namespace: sql-lsp-enterprise
  labels:
    app: sql-lsp-enterprise
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/certificate-id"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "https"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
  spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: sql-lsp-enterprise

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sql-lsp-enterprise-ingress
  namespace: sql-lsp-enterprise
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/tls-acme: "true"
spec:
  tls:
  - hosts:
    - lsp.enterprise.example.com
    secretName: sql-lsp-tls
  rules:
  - host: lsp.enterprise.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sql-lsp-enterprise
            port:
              number: 443

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sql-lsp-enterprise-hpa
  namespace: sql-lsp-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sql-lsp-enterprise
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sql-lsp-enterprise-pdb
  namespace: sql-lsp-enterprise
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sql-lsp-enterprise

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sql-lsp-sa
  namespace: sql-lsp-enterprise
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::account:role/eks-service-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sql-lsp-role
  namespace: sql-lsp-enterprise
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps", "pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "podmonitors", "prometheusrules"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sql-lsp-role-binding
  namespace: sql-lsp-enterprise
subjects:
- kind: ServiceAccount
  name: sql-lsp-sa
roleRef:
  kind: Role
  name: sql-lsp-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sql-lsp-enterprise-monitor
  namespace: sql-lsp-enterprise
  labels:
    team: backend
spec:
  selector:
    matchLabels:
      app: sql-lsp-enterprise
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    scheme: https
    tlsConfig:
      insecureSkipVerify: false
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_label_app]
      targetLabel: app

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: sql-lsp-enterprise-alerts
  namespace: sql-lsp-enterprise
  labels:
    prometheus: main
    role: alert-rules
spec:
  groups:
  - name: sql-lsp-enterprise
    rules:
    - alert: CacheHitRateLow
      expr: sql_lsp_cache_hit_rate < 0.85
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Cache hit rate below target"
        description: "Cache hit rate is {{ $value }}%, below 85% target for 5 minutes"

    - alert: MemoryUsageHigh
      expr: sql_lsp_memory_usage_percent > 80
      for: 3m
      labels:
        severity: warning
      annotations:
        summary: "Memory usage above threshold"
        description: "Memory usage is {{ $value }}%, above 80% threshold for 3 minutes"

    - alert: SQLInjectionDetected
      expr: rate(sql_lsp_security_incidents_total[5m]) > 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "SQL injection attack detected"
        description: "Potential SQL injection attack detected - immediate investigation required"

    - alert: LSPServiceDown
      expr: up{job="sql-lsp-enterprise"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "SQL LSP service is down"
        description: "All SQL LSP instances are down - service unavailable"

    - alert: ComplianceViolation
      expr: sql_lsp_compliance_violations_total > 0
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Compliance violation detected"
        description: "Security or compliance violation detected - review required"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: compliance-audit-scheduler
  namespace: sql-lsp-enterprise
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sql-lsp-sa
          containers:
          - name: compliance-auditor
            image: rust-ai-ide/compliance-auditor:v1.0.0
            env:
            - name: AUDIT_TYPE
              value: "daily_compliance_check"
            - name: COMPLIANCE_FRAMEWORKS
              value: "SOC2,GDPR"
            resources:
              limits:
                cpu: "500m"
                memory: 512Mi
              requests:
                cpu: "250m"
                memory: 256Mi
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: performance-regression-test
  namespace: sql-lsp-enterprise
spec:
  schedule: "0 1 * * 0"  # Weekly on Sunday at 1 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sql-lsp-sa
          containers:
          - name: regression-tester
            image: rust-ai-ide/performance-tester:v1.0.0
            env:
            - name: TEST_DURATION_MINUTES
              value: "30"
            - name: PERFORMANCE_THRESHOLDS
              value: "execution_time_ms:1500,memory_usage_mb:6000"
            resources:
              limits:
                cpu: "1000m"
                memory: 2Gi
              requests:
                cpu: "500m"
                memory: 1Gi
          restartPolicy: OnFailure

---
apiVersion: policy/v1
kind: NetworkPolicy
metadata:
  name: sql-lsp-enterprise-network-policy
  namespace: sql-lsp-enterprise
spec:
  podSelector:
    matchLabels:
      app: sql-lsp-enterprise
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9200  # Elasticsearch
    - protocol: TCP
      port: 443   # HTTPS outbound
    - protocol: TCP
      port: 80    # HTTP outbound for updates

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: sql-lsp-enterprise-quota
  namespace: sql-lsp-enterprise
spec:
  hard:
    requests.cpu: "8"
    requests.memory: 16Gi
    limits.cpu: "16"
    limits.memory: 32Gi
    persistentvolumeclaims: "5"
    secrets: "10"
    configmaps: "10"
    services: "10"
    jobs.batch: "100"