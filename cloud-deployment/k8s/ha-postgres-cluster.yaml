# Enterprise High-Availability PostgreSQL Cluster Configuration
# Deploys multi-zone PostgreSQL cluster with automatic failover and backup
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-ha-config
  namespace: database
data:
  POSTGRES_DB: "rust_ai_ide"
  POSTGRES_USER: "ai_user"
  PGDATA: "/var/lib/postgresql/data/pgdata"
  POSTGRES_INITDB_ARGS: "--data-checksums"
  POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
  POSTGRES_PASSWORD_FILE: "/etc/postgres/secrets/password"
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration File
    # Enterprise HA Configuration
    local   all             postgres                                peer
    local   all             all                                     scram-sha-256
    host    all             all             127.0.0.1/32            scram-sha-256
    host    all             all             ::1/128                 scram-sha-256
    host    all             all             10.0.0.0/8             scram-sha-256
    host    all             all             172.16.0.0/12          scram-sha-256
    host    all             all             192.168.0.0/16         scram-sha-256

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-ha-secrets
  namespace: database
type: Opaque
data:
  postgres-password: "$POSTGRES_PASSWORD_BASE64"
  replication-password: "$POSTGRES_REPLICATION_PASSWORD_BASE64"
  metrics-password: "$POSTGRES_METRICS_PASSWORD_BASE64"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-ha-primary
  namespace: database
  labels:
    app: postgres
    role: primary
    ha-cluster: "true"
spec:
  serviceName: postgres-ha
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        role: primary
        ha-cluster: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - "$PRIMARY_ZONE"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: postgres
            topologyKey: kubernetes.io/hostname
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        - containerPort: 8008
          name: metrics
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-ha-secrets
              key: postgres-password
        - name: PGDATA
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: PGDATA
        - name: POSTGRES_INITDB_ARGS
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: POSTGRES_INITDB_ARGS
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: pg-hba
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
          readOnly: true
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-ha-config
      - name: pg-hba
        configMap:
          name: postgres-ha-config
          items:
          - key: pg_hba.conf
            path: pg_hba.conf
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-ha-storage-primary

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-ha-replica
  namespace: database
  labels:
    app: postgres
    role: replica
    ha-cluster: "true"
spec:
  serviceName: postgres-ha-replica
  replicas: 2
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        role: replica
        ha-cluster: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - "$REPLICA_ZONE_1"
                - "$REPLICA_ZONE_2"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: postgres
                role: primary
            topologyKey: kubernetes.io/hostname
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        command:
        - /bin/bash
        - -c
        - |
          export PGPASSWORD=$(cat /etc/postgres/secrets/replication-password)
          until pg_basebackup -h postgres-ha.database.svc.cluster.local -D /var/lib/postgresql/data/pgdata -U repl_user -vP --wal-method=stream; do
            echo 'Waiting for primary to be ready...'
            sleep 2
          done
          exec postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-ha-secrets
              key: postgres-password
        - name: PGDATA
          valueFrom:
            configMapKeyRef:
              name: postgres-ha-config
              key: PGDATA
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: pg-hba
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
          readOnly: true
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-ha-config
      - name: pg-hba
        configMap:
          name: postgres-ha-config
          items:
          - key: pg_hba.conf
            path: pm_hba.conf
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-ha-storage-replica

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-ha
  namespace: database
  labels:
    app: postgres
    role: primary
    ha-cluster: "true"
spec:
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
    role: primary
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-ha-replica
  namespace: database
  labels:
    app: postgres
    role: replica
    ha-cluster: "true"
spec:
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
    role: replica
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-ha-storage-primary
  namespace: database
  labels:
    app: postgres
    role: primary
    ha-cluster: "true"
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "premium-rwo"
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-ha-storage-replica
  namespace: database
  labels:
    app: postgres
    role: replica
    ha-cluster: "true"
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "premium-rwo"
  resources:
    requests:
      storage: 100Gi

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-ha-pdb
  namespace: database
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: postgres
      ha-cluster: "true"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-ha-backup
  namespace: database
  labels:
    app: postgres
    component: backup
spec:
  schedule: "0 */4 * * *"  # Every 4 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/bash
            - -c
            - |
              export PGPASSWORD=$(cat /etc/backup/secrets/postgres-password)
              pg_dump -h postgres-ha.database.svc.cluster.local -U ${POSTGRES_USER} ${POSTGRES_DB} | gzip > /backup/postgres-ha-$(date +%Y%m%d-%H%M%S).sql.gz
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: postgres-secrets
              mountPath: /etc/backup/secrets
              readOnly: true
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-ha-backup-storage
          - name: postgres-secrets
            secret:
              secretName: postgres-ha-secrets
          restartPolicy: OnFailure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-ha-backup-storage
  namespace: database
  labels:
    app: postgres
    component: backup
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "standard"
  resources:
    requests:
      storage: 500Gi