framework = "IOKit"
crate = "objc2-io-kit"
required-crates = ["objc2-core-foundation"]
custom-lib-rs = true
macos = "10.0"
maccatalyst = "13.0"
ios = "16.0"
visionos = "1.0"

# FIXME: Map the rest of IOKit
module.audio.skipped = true
module.avc.skipped = true
module.firewire.skipped = true
module.i2c.skipped = true
module.iokitmig.skipped = true
module.kext.skipped = true
module.ndrvsupport.skipped = true
module.network.skipped = true
module.ps.skipped = true
module.pwr_mgt.skipped = true
module.sbp2.skipped = true
module.scsi.skipped = true
module.serial.skipped = true
module.storage.skipped = true
module.stream.skipped = true

# Requires C++
module.video.skipped = true

# `ns_consumed`, `cf_consumed` and `os_consumed`
fn.IOServiceGetMatchingService.skipped = true
fn.IOServiceGetMatchingServices.skipped = true
fn.IOServiceAddMatchingNotification.skipped = true
# + a few methods from DriverKit.framework and Kernel.framework, but those
# are written in C++, so we're not going to ever handle them anyhow.

# Unnecessarily requires `libc`
typedef.IOReturn.skipped = true

# Complex expression involving `sizeof`
const.kOSAsyncRef64Size.skipped = true
const.kOSAsyncRef64Count.skipped = true

# Needs io_user_reference_t, and contains arrays in typedefs
typedef.OSAsyncReference64.skipped = true
struct.OSNotificationHeader64.skipped = true
struct.IOServiceInterestContent64.skipped = true

# Needs mach_msg_size_t/mach_msg_header_t/mach_timespec_t, which isn't exposed by libc
typedef.OSAsyncReference.skipped = true
struct.OSNotificationHeader.skipped = true
fn.IODispatchCalloutFromMessage.skipped = true
fn.IOServiceWaitQuiet.skipped = true
fn.IOKitWaitQuietWithOptions.skipped = true
fn.IOKitWaitQuiet.skipped = true
fn.OSGetNotificationFromMessage.skipped = true
struct._IODataQueueAppendix.skipped = true
typedef.IODataQueueAppendix.skipped = true
struct.IORPCMessageMach.skipped = true
struct.IORPCMessageErrorReturn.skipped = true
struct.IORPC.skipped = true
fn.IORPCMessageFromMach.skipped = true
struct.evioSpecialKeyMsg.skipped = true
typedef.evioSpecialKeyMsg_t.skipped = true

# Recursive
typedef.LowLatencyUserBufferInfo.skipped = true
struct.LowLatencyUserBufferInfo.skipped = true
typedef.LowLatencyUserBufferInfoV2.skipped = true
struct.LowLatencyUserBufferInfoV2.skipped = true
typedef.LowLatencyUserBufferInfoV3.skipped = true
struct.LowLatencyUserBufferInfoV3.skipped = true

# Overflows while calculating on 32-bit.
const.kIORPCMessageIDKernel.skipped = true
const.kUSBAllStreams.skipped = true

# Defined twice
const.kIOUserServerCDHashKey.skipped = true
const.kAppleExternalConnectorBitmap.skipped = true

# Needs us to define `iokit_usbhost_msg` and `iokit_usbhost_err`.
const.kUSBHostMessageConfigurationSet.skipped = true
const.kUSBHostMessageRenegotiateCurrent.skipped = true
const.kUSBHostMessageControllerException.skipped = true
const.kUSBHostMessageDeviceIsRequestingClose.skipped = true
const.kUSBHostReturnPipeStalled.skipped = true
const.kUSBHostReturnNoPower.skipped = true
const.kUSBHostReturnRedundant.skipped = true

# Defined before the thing it refers to.
const.kUSBDeviceContainerID.skipped = true

# Overflows while calculating
const.kIOUSB30Bitrate5Gbps.skipped = true
const.kIOUSB30Bitrate10Gbps.skipped = true
const.kIOUSB32Bitrate20Gbps.skipped = true
const.kIODisplayModeIDBootProgrammable.skipped = true
const.kIODisplayModeIDReservedBase.skipped = true
const.kAppleOnboardGUID.skipped = true

# Emit these.
const.IO1BitIndexedPixels.skipped = false
const.IO2BitIndexedPixels.skipped = false
const.IO4BitIndexedPixels.skipped = false
const.IO8BitIndexedPixels.skipped = false
const.IO16BitDirectPixels.skipped = false
const.IO32BitDirectPixels.skipped = false
const.IOYUV422Pixels.skipped = false
const.IO8BitOverlayPixels.skipped = false
const.IOPagedPixels.skipped = false
const.IO_SampleTypeAlpha.skipped = false
const.IO_SampleTypeSkip.skipped = false

# https://github.com/shurizzle/rust-four-char-code/issues/2
const.kConnectionIgnore.skipped = true
const.kConnectionControllerDepthsSupported.skipped = true
const.kConnectionControllerColorDepth.skipped = true
const.kConnectionControllerDitherControl.skipped = true

# Needs OSSpinLock
struct.StdFBShmem_t.skipped = true
typedef.StdFBShmem_t.skipped = true
struct.IOGraphicsEngineContext.skipped = true
typedef.IOGraphicsEngineContext.skipped = true
const.kIOGraphicsEngineContext.skipped = true
const.kIOGraphicsEngineContextVersion.skipped = true
struct._NXEQElStruct.skipped = true
typedef.NXEQElement.skipped = true
struct._evGlobals.skipped = true
typedef.EvGlobals.skipped = true
const.IOSharedLockData.skipped = true
const.ev_lock_data_t.skipped = true

# Unknown ABI
typedef.IOPixelEncoding.skipped = true
struct.IOPixelInformation.skipped = true
typedef.IOPixelInformation.skipped = true
struct.bm12Cursor.skipped = true
struct.bm18Cursor.skipped = true
struct.bm34Cursor.skipped = true
struct.bm38Cursor.skipped = true
typedef.NXEventSystemInfoData.skipped = true

# Double typedefs
typedef.NXTabletPointDataPtr.skipped = true
typedef.NXTabletProximityDataPtr.skipped = true
typedef.NXEventPtr.skipped = true

# Needs libc::audit_token_t
struct._NXEventExtension.skipped = true
typedef.NXEventExtension.skipped = true
struct._NXEventExt.skipped = true
typedef.NXEventExt.skipped = true
fn.IOHIDAccessCheckAuditToken.skipped = true

# Private
typedef._NXLLEvent.skipped = true
