[package]
name = "rust-ai-ide-lsp"
readme = { workspace = true }
version = { workspace = true }
edition = { workspace = true }
authors = { workspace = true }
description = "Language Server Protocol implementation for Rust AI IDE"
license = { workspace = true }
rust-version = { workspace = true }
publish = { workspace = true }
repository = { workspace = true }
[dependencies]

# LSP dependencies
lsp-types = { workspace = true, features = ["proposed"] }
async-trait = { workspace = true }
lsp-server = { workspace = true }
tower-lsp = { workspace = true }
tokio-tungstenite = { version = "0.27.0", default-features = false, features = ["rustls-tls-webpki-roots"] }
tungstenite = { version = "0.27.0", default-features = false, features = ["rustls-tls-webpki-roots"] }
futures-util = { workspace = true }
url = { workspace = true, features = ["serde"] }
serde_repr = { workspace = true }
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "fmt", "registry", "std"] }

# Additional utilities for multi-language support
glob = "0.3.3"
parking_lot = { version = "0.12.4", features = ["serde"] }
tempfile = { workspace = true }     # For tests and temporary files
pathdiff = "0.2.3"      # For path manipulation
ignore = "0.4.23"       # For efficient file system traversal
which = "8.0.0"         # For finding executables in PATH

# Added for multi-language features
rand = { workspace = true, optional = true } # For random load balancing

# Monitoring and Security Dependencies
prometheus = { version = "0.13.3", optional = true } # Prometheus metrics collection
opentelemetry = { version = "0.21.0", optional = true } # Advanced observability
hdrhistogram = { version = "7.5.3", optional = true } # High-performance latency histograms
governor = { version = "0.6.0", optional = true } # Rate limiting
rusqlite = { workspace = true } # Audit logging database
sha3 = "0.10.8" # Secure hashing for audit trails
base64 = "0.21" # Data encoding/decoding
lazy_static = "1.4.0" # Lazy initialization

# Performance Optimization Dependencies
dashmap = { version = "6.1.0", features = ["serde"] }
hyper = { version = "1.4.1", features = ["full"], optional = true } # HTTP load testing

# Security Enhancement Dependencies
regex = "1.10" # SQL injection pattern matching
uuid = { version = "1.6", features = ["v4"] } # Secure session IDs
rustls = "0.23.0" # Secure cryptographic functions
rustls-pemfile = "2.0.0"

# Development and Testing Dependencies
criterion = "0.5" # Performance benchmarking
proptest = "1.3" # Property-based testing for security

# Tree-Sitter for advanced multi-language parsing
tree-sitter = { workspace = true, optional = true }
tree-sitter-rust = { workspace = true, optional = true }
tree-sitter-typescript = { workspace = true, optional = true }
tree-sitter-javascript = { workspace = true, optional = true }
tree-sitter-python = { workspace = true, optional = true }
tree-sitter-go = { workspace = true, optional = true }
tree-sitter-java = { workspace = true, optional = true }
tree-sitter-cpp = { workspace = true, optional = true }
tree-sitter-c = { workspace = true, optional = true }
tree-sitter-sql = { workspace = true, optional = true }
tree-sitter-json = { workspace = true, optional = true }
tree-sitter-yaml = { workspace = true, optional = true }

# Core async and error handling dependencies from workspace
tokio = { workspace = true }
futures = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
log = { workspace = true }
anyhow = { workspace = true }
chrono = { workspace = true }
toml = { workspace = true }

# Performance optimizations
rayon = { workspace = true }          # For parallel processing
lru = { workspace = true }         # For LRU caching
once_cell = { workspace = true }   # For lazy static initialization
num_cpus = { workspace = true }    # For getting CPU count for parallel processing
memmap2 = { workspace = true }        # For memory-mapped file I/O

# Project dependencies
rust-ai-ide-debugger = { path = "../rust-ai-ide-debugger" }
rust-ai-ide-core = { path = "../rust-ai-ide-core" }
rust-ai-ide-shared-services = { path = "../rust-ai-ide-shared-services" }
rust-ai-ide-ai = { path = "../rust-ai-ide-ai", optional = true }
rust-ai-ide-lazy-loading = { path = "../rust-ai-ide-lazy-loading" }
moka = { workspace = true, optional = true }

[features]
default = ["ai", "basic-lsp", "multi-language-lsp", "sql-lsp"]
ai = ["rust-ai-ide-ai"]
basic-lsp = []
multi-language-lsp = [
    "rand",
    "tree-sitter",
    "tree-sitter-rust",
    "tree-sitter-typescript",
    "tree-sitter-javascript",
    "tree-sitter-python",
    "tree-sitter-go",
    "tree-sitter-java",
    "tree-sitter-cpp",
    "tree-sitter-c",
    "tree-sitter-sql",
    "tree-sitter-json",
    "tree-sitter-yaml",
]  # Enable multi-language LSP support with Tree-Sitter parsers
sql-lsp = [
    "tree-sitter-sql",
    "moka"
]  # Enable SQL-specific LSP features with caching
# ai-predictive = [
#     "rust-ai-ide-ai-predictive",
#     "moka"
# ]  # Enable AI predictive features integration
