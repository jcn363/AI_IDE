[package]
name = "rust-ai-ide-collaboration"

version = { workspace = true }
edition = { workspace = true }
authors = { workspace = true }
description = "Real-time collaboration system for Rust AI IDE"
license = { workspace = true }
rust-version = { workspace = true }
publish = { workspace = true }
repository = { workspace = true }

[dependencies]
# Async runtime
tokio = { workspace = true, features = ["sync", "rt", "net", "time", "macros"] }

# Serialization for CRDT operations
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }

# Error handling
thiserror = { workspace = true }
log = { workspace = true }

# WebSocket support for real-time communication
tokio-tungstenite = "0.21.0"
futures-util = "0.3.30"
tokio-native-tls = "0.3.1"
native-tls = "0.2.11"

# Enhanced CRDT implementation
uuid = { version = "1.0", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }

# Performance monitoring
moka = { version = "0.12", features = ["future"] }

# Security and validation
rust-ai-ide-security = { path = "../rust-ai-ide-security" }
rust-ai-ide-common = { path = "../rust-ai-ide-common" }

# Type definitions and error handling
rust-ai-ide-types = { path = "../rust-ai-ide-types" }
rust-ai-ide-errors = { path = "../rust-ai-ide-errors" }

# AI integration for conflict resolution
rust-ai-ide-ai-inference = { path = "../rust-ai-ide-ai-inference" }

# LSP integration for collaborative editing context
rust-ai-ide-lsp = { path = "../rust-ai-ide-lsp" }

# Infra components for EventBus and connection pooling
rust-ai-ide-core = { path = "../rust-ai-ide-core" }

# SQLite persistence
rusqlite = { workspace = true }

[features]
default = ["std"]
std = []
full = ["std"]

# Platform-specific features
windows = []
unix = []
macos = []