[package]
name = "rust-ai-ide-advanced-refactoring"
readme = { workspace = true }
version = "0.1.0"
edition = "2021"
description = "Phase 3.3: Advanced Refactoring Pipeline - AI-driven refactoring suggestions with automated transformation validation and safety mechanisms"
license = "MIT OR Apache-2.0"
publish = false
rust-version = "1.91.0"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core async runtime
tokio = { workspace = true, features = ["full"] }
tokio-util = { workspace = true }
async-trait = { workspace = true }
futures = { workspace = true }
tokio-stream = { workspace = true }

# Serialization
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }

# Caching infrastructure (multi-level caching with Moka)
moka = { workspace = true, features = ["future"] }

# Parallel processing
rayon = { workspace = true }

# Concurrent data structures
dashmap = { workspace = true }
parking_lot = { workspace = true }

# Error handling and logging
anyhow = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }

# Path and filesystem utilities
pathdiff = { workspace = true }
walkdir = { workspace = true }
ignore = { workspace = true }

# Performance monitoring
sysinfo = { workspace = true }

# AST analysis and code transformation
syn = { workspace = true }
quote = { workspace = true }
proc-macro2 = { workspace = true }

# Code formatting for generated transformations
prettyplease = "0.2.25"

# Statistical analysis for risk assessment
statrs = { workspace = true }

# Time and date handling
chrono = { workspace = true, features = ["serde"] }

# UUID for tracking transformations
uuid = { workspace = true, features = ["serde", "v4"] }

# Database integration (SQLite with enforced version)
rusqlite = { workspace = true, features = ["bundled"] }

# Graph analysis for dependency relationships
petgraph = { workspace = true, features = ["serde-1"] }

# Cryptographic hashing for equivalence checking
sha2 = { workspace = true }

# HashMap for hashing operations
sha3 = { workspace = true }

# Internal dependencies (Phase 1-3.2 integration)
rust-ai-ide-cache = { path = "../rust-ai-ide-cache" }
rust-ai-ide-lsp = { path = "../rust-ai-ide-lsp" }
rust-ai-ide-predictive-maintenance = { path = "../rust-ai-ide-predictive-maintenance" }
rust-ai-ide-real-time-analysis = { path = "../rust-ai-ide-real-time-analysis" }
rust-ai-ide-predictive-quality = { path = "../rust-ai-ide-predictive-quality" }
rust-ai-ide-orchestration = { path = "../rust-ai-ide-orchestration" }
rust-ai-ide-performance = { path = "../rust-ai-ide-performance" }

# Common types and validation
rust-ai-ide-types = { path = "../rust-ai-ide-types" }
rust-ai-ide-shared-types = { path = "../rust-ai-ide-shared-types" }
rust-ai-ide-common = { path = "../rust-ai-ide-common", features = ["validation"] }
rust-ai-ide-errors = { path = "../rust-ai-ide-errors" }

# AI/ML capabilities integration
rust-ai-ide-ai-inference = { path = "../rust-ai-ide-ai-inference" }
rust-ai-ide-multi-model-orchestrator = { path = "../rust-ai-ide-multi-model-orchestrator" }

# Refactoring-specific crates
rust-ai-ide-ai-refactoring = { path = "../rust-ai-ide-ai-refactoring" }

# Security integration
rust-ai-ide-security = { path = "../rust-ai-ide-security" }

[features]
default = ["ai-suggestions", "safety-validation", "impact-analysis", "execution-orchestration"]
ai-suggestions = ["ai-pattern-recognition", "context-analysis"]
safety-validation = ["equivalence-checking", "behavior-preservation"]
impact-analysis = ["cost-benefit", "risk-assessment"]
execution-orchestration = ["dependency-resolution", "progress-reporting"]
ai-pattern-recognition = []
context-analysis = []
equivalence-checking = []
behavior-preservation = []
cost-benefit = []
risk-assessment = []
dependency-resolution = []
progress-reporting = []
benchmarking = []
experimental = []

[dev-dependencies]
tokio-test = "0.4.4"
mockall = "0.13.1"
criterion = { version = "0.7.0", features = ["html_reports"] }
tempfile = "3.10.1"
proptest = "1.4.0"
fake = "4.4.0"

[[bench]]
name = "refactoring_suggestion_benchmark"
readme = { workspace = true }
harness = false

[[bench]]
name = "transformation_validation_benchmark"
readme = { workspace = true }
harness = false

[[bench]]
name = "safety_guard_performance"
readme = { workspace = true }
harness = false

[[bench]]
name = "impact_assessment_performance"
readme = { workspace = true }
harness = false

[[bench]]
name = "execution_orchestration_benchmark"
readme = { workspace = true }
harness = false