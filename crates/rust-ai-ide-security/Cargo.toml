[package]
name = "rust-ai-ide-security"
readme = { workspace = true }
version = { workspace = true }
edition = { workspace = true }
authors = { workspace = true }
description = "Comprehensive security and compliance framework for Rust AI IDE"
license = { workspace = true }
rust-version = { workspace = true }
publish = { workspace = true }
repository = { workspace = true }

[dependencies]
# Core dependencies
anyhow = { workspace = true }
thiserror = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
serde_yaml = { workspace = true }
chrono = { workspace = true }

# Async runtime
tokio = { workspace = true, features = ["full", "process"] }
async-trait = { workspace = true }
futures = { workspace = true }

# Logging and tracing
tracing = { version = "0.1.41", features = ["log"] }
tracing-subscriber = { workspace = true, features = ["env-filter", "json"] }
log = { workspace = true }

# Security and utilities
governor = { workspace = true, features = ["std"] }
lazy_static = { workspace = true, features = ["spin_no_std"] }
regex = { workspace = true }

# Cryptography and security
jsonwebtoken = { workspace = true, default-features = false, features = [
  "pem",
  "use_pem",
] }
url = { workspace = true, features = ["serde"] }
bcrypt = { workspace = true }
rand = { workspace = true }
sha2 = { workspace = true }
aes-gcm = { workspace = true }
rsa = { workspace = true, features = ["pem", "std"] }
webauthn-rs = { version = "0.5.2", features = [
  "danger-allow-state-serialisation",
], optional = true }
webauthn-rs-proto = { version = "0.5.2", optional = true }
webauthn-rs-core = { version = "0.5.2", optional = true }
base64 = { workspace = true }
uuid = { workspace = true, features = ["v4", "serde"] }

# CLI and file operations
clap = { workspace = true, features = ["derive", "env"] }
walkdir = { workspace = true }
ignore = { workspace = true }
path-absolutize = { workspace = true }

# Code analysis and scanning
syn = { workspace = true, features = ["full", "visit", "extra-traits"] }
quote = { workspace = true }
proc-macro2 = { workspace = true, features = ["span-locations"] }
cargo_metadata = { workspace = true }

# Report generation and serialization
quick-xml = { workspace = true, features = ["serialize"] }
xml-rs = { workspace = true }

# HTTP client for external services
reqwest = { workspace = true, features = ["json", "rustls-tls"] }

# Integration with other crates
rust-ai-ide-types = { workspace = true }
rust-ai-ide-errors = { workspace = true }

[dev-dependencies]
# Testing utilities
mockall = { workspace = true , features = ["nightly"] }
tokio-test = { workspace = true }
rstest = { workspace = true }
log = { workspace = true }
tempfile = { workspace = true }
hex = { workspace = true }
chacha20poly1305 = { workspace = true }
generic-array = { workspace = true }
argon2 = { workspace = true }
base64 = { workspace = true }
cargo-fuzz = { workspace = true }

[features]
default = ["webauthn"]
webauthn = ["dep:webauthn-rs", "dep:webauthn-rs-proto", "dep:webauthn-rs-core"]

# Security components
zero-trust = []
audit-logging = []
rbac = []
key-management = []
encrypted-config = []
# sqlx = ["dep:sqlx"]  # Uncomment when enabling SQLx

# Enterprise features
compliance = ["audit-logging", "rbac", "key-management", "encrypted-config"]
full-security = [
  "compliance",
  "zero-trust",
] # Removed sqlx from default full-security
full = ["full-security"]

# Database backends (temporarily disabled)
# sqlite-audit = ["sqlx"]
# postgres-audit = ["sqlx", "sqlx/postgres"]
# mysql-audit = ["sqlx", "sqlx/mysql"]
