[workspace]
resolver = "2"

members = [
  "crates/rust-ai-ide-advanced-memory",
  "crates/rust-ai-ide-advanced-refactoring",
  "crates/rust-ai-ide-ai",
  "crates/rust-ai-ide-ai-analysis",
  "crates/rust-ai-ide-ai-codegen",
  "crates/rust-ai-ide-ai-distributed-coordinator",
  "crates/rust-ai-ide-ai-inference",
  "crates/rust-ai-ide-ai-integration",
  "crates/rust-ai-ide-ai-learning",
  "crates/rust-ai-ide-ai-orchestration-core",
  "crates/rust-ai-ide-ai-predictive",
  "crates/rust-ai-ide-ai-quantization",
  "crates/rust-ai-ide-ai-refactoring",
  "crates/rust-ai-ide-ai-security",
  "crates/rust-ai-ide-ai-specgen",
  "crates/rust-ai-ide-ai-sql-lsp",
  "crates/rust-ai-ide-ai1-architecture",
  "crates/rust-ai-ide-ai1-reviews",
  "crates/rust-ai-ide-ai1-security",
  "crates/rust-ai-ide-ai1-semantic",
  "crates/rust-ai-ide-ai2-ml-management",
  "crates/rust-ai-ide-ai2-predictive",
  "crates/rust-ai-ide-ai3-nlp",
  "crates/rust-ai-ide-ai3-quantum",
  "crates/rust-ai-ide-ai5-consciousness-paradigm",
  "crates/rust-ai-ide-ai5-consciousness-synth",
  "crates/rust-ai-ide-ai5-infinite-intelligence",
  "crates/rust-ai-ide-ai5-infinite-scalability",
  "crates/rust-ai-ide-ai5-meta-consciousness",
  "crates/rust-ai-ide-ai5-meta-universe",
  "crates/rust-ai-ide-ai5-multi-reality",
  "crates/rust-ai-ide-ai5-quantum-ethics",
  "crates/rust-ai-ide-ai5-quantum-reality-bridges",
  "crates/rust-ai-ide-ai5-quantum-reality-interface",
  "crates/rust-ai-ide-ai5-reality-collaboration",
  "crates/rust-ai-ide-ai5-thought-compile",
  "crates/rust-ai-ide-cache",
  "crates/rust-ai-ide-cargo",
  "crates/rust-ai-ide-cloud-feature-flags",
  "crates/rust-ai-ide-cloud-integrations",
  "crates/rust-ai-ide-code-generator",
  "crates/rust-ai-ide-code-style",
  "crates/rust-ai-ide-collaboration",
  "crates/rust-ai-ide-commands-ai",
  "crates/rust-ai-ide-commands-registry",
  "crates/rust-ai-ide-common",
  "crates/rust-ai-ide-compliance",
  "crates/rust-ai-ide-config",
  "crates/rust-ai-ide-connectors",
  "crates/rust-ai-ide-core",
  "crates/rust-ai-ide-core-ai",
  "crates/rust-ai-ide-core-file",
  "crates/rust-ai-ide-core-fundamentals",
  "crates/rust-ai-ide-core-metrics",
  "crates/rust-ai-ide-core-shell",
  "crates/rust-ai-ide-debugger",
  "crates/rust-ai-ide-dependency-graph",
  "crates/rust-ai-ide-derive-utils",
  "crates/rust-ai-ide-dsl-codegen",
  "crates/rust-ai-ide-errors",
  "crates/rust-ai-ide-integration",
  "crates/rust-ai-ide-lsp",
  "crates/rust-ai-ide-memory-optimization",
  "crates/rust-ai-ide-model-versioning",
  "crates/rust-ai-ide-monitoring",
  "crates/rust-ai-ide-multi-model-orchestrator",
  "crates/rust-ai-ide-multi-reality",
  "crates/rust-ai-ide-observability",
  "crates/rust-ai-ide-onnx-runtime",
  "crates/rust-ai-ide-orchestration",
  "crates/rust-ai-ide-parallel-processing",
  "crates/rust-ai-ide-perfdevel-tools",
  "crates/rust-ai-ide-work-stealing-scheduler",
  "crates/rust-ai-ide-workspace-optimizer",
  "crates/rust-ai-ide-performance",
  "crates/rust-ai-ide-performance-monitoring",
  "crates/rust-ai-ide-plugins",
  "crates/rust-ai-ide-predictive-completion",
  "crates/rust-ai-ide-predictive-maintenance",
  "crates/rust-ai-ide-predictive-quality",
  "crates/rust-ai-ide-quality-dashboard",
  "crates/rust-ai-ide-real-time-analysis",
  "crates/rust-ai-ide-security",
  "crates/rust-ai-ide-security-monitoring",
  "crates/rust-ai-ide-semantic-search",
  "crates/rust-ai-ide-shared-codegen",
  "crates/rust-ai-ide-shared-services",
  "crates/rust-ai-ide-shared-types",
  "crates/rust-ai-ide-shared-utils",
  "crates/rust-ai-ide-simd",
  "crates/rust-ai-ide-supervisor",
  "crates/rust-ai-ide-types",
  "crates/rust-ai-ide-ui",
  "crates/rust-ai-ide-vector-database",
  "crates/rust-ai-ide-wasm-components",
  "crates/rust-ai-ide-webhooks",
  "integration-tests",
  "crates/shared-test-utils",
  "src-tauri",
  "test-performance-analyzer",
  "test-performance-project",
  "workspace-hack",
]

exclude = [
  "crates/rust-ai-ide-security/fuzz",
]


[workspace.package]
version = "0.1.0"
edition = "2021"
rust-version = "1.91.0"
authors = ["Rust AI IDE Team"]
license = "MIT OR Apache-2.0"
publish = false
repository = "https://github.com/rust-ai-ide/rust-ai-ide"
homepage = "https://github.com/rust-ai-ide/rust-ai-ide"
readme = "README.md"

# Explicitly specify SQLite-related dependencies to avoid conflicts
[workspace.dependencies]
# Cache, security, and shared types dependencies
rust-ai-ide-cache = { path = "crates/rust-ai-ide-cache", default-features = false }
rust-ai-ide-security = { path = "crates/rust-ai-ide-security", default-features = false }
rust-ai-ide-shared-types = { path = "crates/rust-ai-ide-shared-types", default-features = false }
rust-ai-ide-performance = { path = "crates/rust-ai-ide-performance", default-features = false }
rusqlite = { version = "^0.37.0", default-features = false, features = [
  "bundled",
] }
turtle = { version = "1.0.0-rc.3" }

# Common dependencies shared across crates (using caret for flexible versioning)
anyhow = { version = "^1.0.99" }
bytes = { version = "1.10.1" }
chrono = { version = "0.4.42", default-features = false, features = [
  "serde",
  "clock",
] }
dirs-next = { version = "^2.0.0" }
filetime = { version = "^0.2.26" }
hex = { version = "0.4.3" }
hmac = { version = "0.13.0-rc.1" }
statrs = { version = "0.18.0" }
sha2 = { version = "0.10.9" }
sha3 = { version = "0.11.0-rc.3" }
rsa = { version = "0.10.0-rc.8", features = ["std"] }
futures = { version = "^0.3.31" }
governor = { version = "0.10.1" }
lazy_static = { version = "^1.5.0" }
log = { version = "^0.4.28" }
lru = { version = "0.16.1" }
once_cell = { version = "^1.21.3" }
petgraph = { version = "^0.8.2" }
semver = { version = "^1.0.27", default-features = false, features = ["serde"] }
serde = { version = "^1.0.223", default-features = false, features = [
  "derive",
] }
serde_json = "^1.0.145"
quick-xml = "0.38.3"
thiserror = { version = "2.0.16" }
xml-rs = "1.0"
tracing = { version = "0.1.41" }
tracing-opentelemetry = { version = "0.30.0" }
opentelemetry = { version = "0.30.0" }
opentelemetry-otlp = { version = "0.30.0" }
opentelemetry-semantic-conventions = { version = "0.30.0" }

# Metrics and monitoring
metrics = { version = "0.23.0" }
metrics-exporter-prometheus = { version = "0.15.0" }
tokio-metrics = { version = "0.4.0" }

uuid = { version = "^1.18.1", default-features = false, features = [
  "v4",
  "serde",
] }

# Tauri and system dependencies
blake3 = "^1.8.2"
dashmap = "6.1.0"
lsp-server = { version = "^0.7.9" }
lsp-types = { version = "^0.97.0" }
notify = { version = "^8.2.0", default-features = false, features = ["serde"] }
proc-macro2 = { version = "1.0.101", default-features = false, features = [] }
quote = { version = "1.0.40" }
regex = { version = "1.11.2" }
reqwest = { version = "^0.12.23", default-features = false, features = [
  "json",
  "rustls-tls",
] }
serde_yaml = { version = "0.9.34" }
syn = { version = "2.0.106", default-features = false, features = [
  "clone-impls",
  "parsing",
  "printing",
  "visit",
  "visit-mut",
] }
tauri = { version = "2.8.5", features = [] }
tauri-build = { version = "2.4.1" }
tauri-runtime = "2.8.0"
tempfile = "^3.22.0"
terminal_size = "^0.4.3" # Replacement for deprecated term_size from tokei
tokio = { version = "1.47.1", default-features = false, features = [
  "full",
] } # Performance-critical, keep pinned
tokio-test = { version = "0.4.4" }
tokio-util = { version = "0.7.16" }
toml = "^0.9.5"
tower-lsp = { version = "^0.20" }
validator = { version = "^0.20", default-features = false, features = [
  "derive",
] }
walkdir = { version = "2.5.0" }

# AI/ML dependencies (made optional for feature flags)
candle-core = { version = "0.9.1" }
candle-nn = { version = "0.9.1" }
candle-transformers = { version = "0.9.1" }
hf-hub = { version = "0.4.3" }
tokenizers = { version = "0.22.0" }
safetensors = { version = "0.6.2" }

# File system and system utilities
cargo_metadata = { version = "^0.22.0" }
dunce = { version = "^1.0.5" }
fs-err = { version = "^3.1.1" }
path-absolutize = { version = "^3.1.1" }

# Tauri plugins
tauri-plugin-dialog = { version = "^2.4.0" }
tauri-plugin-fs = { version = "^2.4.2" }
tauri-plugin-log = { version = "^2.7", default-features = false, features = [
  "tracing",
] }

# Shared crates within the workspace
async-trait = { version = "^0.1.89" }
cargo-audit = { version = "0.21.0" }
cargo-deny = { version = "0.18.4" }
cargo-fuzz = { version = "0.13.1" }
cargo-geiger = { version = "0.13.0" }
color-eyre = { version = "0.6.5" }
criterion = { version = "0.7.0" }
fancy-regex = { version = "0.16.1" }
handlebars = { version = "6.3.2" }
ignore = { version = "^0.4.23" }
mockall = { version = "0.13.1", features = ["nightly"] }
moka = { version = "0.12.10", default-features = false, features = ["future"] }
num_cpus = { version = "^1.17.0" }
rayon = { version = "^1.11.0" }
rust-ai-ide-ai-codegen = { path = "crates/rust-ai-ide-ai-codegen", default-features = false }
rust-ai-ide-ai-inference = { path = "crates/rust-ai-ide-ai-inference", default-features = false }
rust-ai-ide-common = { path = "crates/rust-ai-ide-common", features = ["tauri-integrated"] }
rust-ai-ide-errors = { path = "./crates/rust-ai-ide-errors" }
rust-ai-ide-lsp = { path = "crates/rust-ai-ide-lsp", features = ["ai", "multi-language-lsp"] }
rust-ai-ide-types = { path = "./crates/rust-ai-ide-types" }
shared-test-utils = { path = "./crates/shared-test-utils" }
sysinfo = { version = "0.37.0" }
tokio-stream = { version = "0.1.17" }
tree-sitter = { version = "0.25.9" }
tree-sitter-c = { version = "0.24.1" }
tree-sitter-cpp = { version = "0.23.4" }
tree-sitter-go = { version = "0.25.0" }
tree-sitter-java = { version = "0.23.5" }
tree-sitter-javascript = { version = "0.25.0" }
tree-sitter-json = { version = "0.24.8" }
tree-sitter-python = { version = "0.25.0" }
tree-sitter-rust = { version = "0.24.0" }
tree-sitter-sql = { version = "0.0.2" }
tree-sitter-typescript = { version = "0.23.2" }
tree-sitter-yaml = { version = "0.7.1" }
typetag = { version = "0.2.20" }

# Moved common scattered dependencies
crossbeam-deque = { version = "^0.8.5" }
env_logger = { version = "^0.11.8" }
generic-array = { version = "0.14" }
heck = { version = "^0.5.0" }
parking_lot = { version = "^0.12.4" }
rand = { version = "^0.9.2" }
strsim = { version = "^0.11.1" }
tracing-subscriber = { version = "^0.3.20", default-features = false, features = ["env-filter"] }

# Color output library as replacement for unmaintained ansi_term
nu-ansi-term = { version = "^0.50.1" }

# New AI/ML service dependencies (made optional for feature flags)
ort = { version = "1.16.3", default-features = false, features = [
   "cuda",
   "tensorrt",
   "openvino",
] }
ndarray = { version = "^0.16.1", default-features = false }
tantivy = { version = "0.25.0", default-features = false }
hnsw = { version = "0.11.0", default-features = false }
memmap2 = { version = "^0.9.8", default-features = false }
lz4 = { version = "^1.28.1" }

# Recently added dependencies
glob = { version = "^0.3.3" }
futures-util = { version = "^0.3.31", default-features = false, features = [
  "std",
] }
url = { version = "^2.5.7", features = ["serde"] }
serde_repr = { version = "^0.1.20" }
pathdiff = { version = "^0.2.3" }
which = { version = "^8.0.0" }
clap = { version = "^4.5.47", default-features = false, features = ["derive", "std"] }
indicatif = "^0.17.7"

# Encryption dependencies (compliant with security policies)
aes-gcm = { version = "0.10.3", default-features = false, features = [
  "aes",
  "alloc",
] }
bcrypt = { version = "0.15" }
jsonwebtoken = { version = "9.0" }
base64 = { version = "^0.22.1" }
base16ct = { version = "0.2.0", features = ["alloc"] }
rustls = { version = "0.23.0", default-features = false, features = ["tls12"] }
rustls-pemfile = { version = "2.0" }
argon2 = "0.5"
chacha20poly1305 = { version = "0.10" }

# Dependencies required by src-tauri
cargo-edit = { version = "^0.13.7" }
license-exprs = { version = "1.6.0" }
dirs = { version = "^6.0" }
glob-match = { version = "^0.2.1" }
rustsec = { version = "^0.30.4" }
spdx = { version = "^0.12.0" }

# Integration testing dependencies
proptest = { version = "^1.7.0", default-features = false, features = ["std"] }
async-lsp = { version = "0.2.2" }
assert_fs = { version = "^1.1.3" }
rstest = { version = "0.18" }

# Workspace hack for dependency deduplication

# Profiles
[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
strip = false
panic = "unwind"
incremental = true
codegen-units = 256

[profile.dev.package."*"]
opt-level = 1
codegen-units = 16

[profile.fast-debug]
inherits = "dev"
opt-level = 1
codegen-units = 16
debug = "line-tables-only"

[profile.release]
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
strip = true
panic = "unwind"
incremental = false
codegen-units = 1
lto = true

[profile.bench]
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
strip = false
incremental = false
codegen-units = 1
lto = true

[profile.test]
opt-level = 0
debug = true

[profile.ci]
inherits = "release"
opt-level = 2
codegen-units = 8
debug = "line-tables-only"
strip = false
incremental = false
lto = "thin"

# Performance analysis profile
[profile.perf]
inherits = "release"
debug = true
strip = false

# Security: Force minimum protobuf version to avoid RUSTSEC-2024-0437
protobuf = { version = ">=3.7.2", default-features = false }

[patch.crates-io]
# Patch protobuf for prometheus and other dependency chains to avoid RUSTSEC-2024-0437
protobuf = { git = "https://github.com/stepancheg/rust-protobuf", rev = "v3.7.2" }

# Workspace-wide optimization for dependency resolution
[workspace.metadata.cargo-hakari]
resolver = "2"
platforms = ["x86_64-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-pc-windows-msvc"]
output-single-feature = true
